--- nudges

cps 1

let modbig slowness = control (scale 0 127 $ slow slowness sine) 
        # midicmd "control" # s "midi" # midichan "14"
    nudging = nudge (scale 0 8 $ slow 32 sine)
    nudging2 = nudge (scale 0 8 $ slow 32.1 sine)
    mod p = foldEvery [2,3] (0.25 <~) $ p
    chan = "0"
    pos = a
    rot = b
    growth = c


do
    d1 $ stdmidinudge $ stack [
        -- harmor
        (|+| note "0") $
        (|+| note "-3") $
        gain "1.15*4" 
            # note "[{0 -12 0 12 -24}%1,{2 5 14 -10 9}%1, {4 16 11}%1]/16",
        -- harmor ab
        ctlNum "5*4" # control (scale 127 127 $ slow 25.1 sine) # midicmd "control",
        ctlNum "1*4" # control (scale 0 127 $ slow 32.1 sine) # midicmd "control",
        ctlNum "2*4" # control (scale 0 127 $ slow 33.1 sine) # midicmd "control",
        ctlNum "3*4" # control (scale 0 127 $ slow 30.1 sine) # midicmd "control",
        ctlNum "10*4" # control (scale 0 127 $ slow 29.1 sine) # midicmd "control"  ] # s "midi" # midichan chan # nudging
    d2 $ gtfo $ s "k*4" # n "3" 
        # speed (scale 0.8 1.2 $ slow 19 sine) 
        # lpf (scale 100 10000 $ slow 17 sine) 
        # nudging # gain "0.8"
        # release "0.1"
    vis $ stdvisnudge $ shift $ hit "1*4" 
        # view "nudges"
        # pos (scale 0 0.01 $ slow 26 tri)
        # rot (scale 0 0.1 $ slow 27 tri)
        # growth (scale 0 0.1 $ slow 28 tri)
        # fade 0.2
        # red (scale 0 1 $ slow 23.133 sine)
        # green (scale 0 1 $ slow 24.471 sine)
        # blue (scale 0 1 $ slow 25.22 sine)
        # nudging


        
hush

-- like mining
bps (230/120)

do
    let patch = "[2 3]/8" -- 2 and 3
    let kitpatch = "[0 3]/8" -- 0 and 3
    let timemod p = degradeBy 0.5 $ slow (discretise (1/3) $ shift' 100 $ choose [1,1.1..3]) $
                    spaceOut (map (1/) [1,1.25..4]) $
                    degradeBy 0.2 $
                    shift $ p
    d1 $ stdmidinudge $
        timemod $
        (|+| note "-3") $
        (|+| note (shift' 300 $ choose[0,0,12])) $
        whenmod 16 12 (|=| note "[-3,0]") $
        whenmod 12 8 (|=| note "[0,2,4]") $
        whenmod 8 4 (|=| note "[0,2]") $
        gain "1(3,8)" # note "[0]" # sound "midi" # midichan patch
    d2 $ stdmidinudge $ timemod $ stack [
        ctlNum "5(3,8)" # control (shift' 301 $ choose [0,127]),
        ctlNum "1(3,8)" # control (scale 0 127 $ shift' 200 rand),
        ctlNum "2(3,8)" # control (scale 0 127 $ shift' 201 rand),
        ctlNum "3(3,8)" # control (scale 0 127 $ shift' 202 rand),
        ctlNum "11(3,8)" # control (scale 0 127 $ shift' 203 rand)
        ] # s "midi" # midichan patch # midicmd "control" 
    -- drums
    d3 $ gtfo $ timemod $ (|+| n kitpatch) $
        stack [
            n "0(3,8)",
            n "2(3,8)",
            n "1/2" 
                # delayt (scale 0.001 0.1 $ slow 20 tri) 
                # delayfb (scale 0.5 0.95 $ slow 21 tri) 
                # delay (scale 0.4 0.8 $ slow 203 rand)] 
            # s "likekit" # orbit "0"
    vis $ stdvisnudge $ timemod $ 
        stack [hit "1/2", hit "0(3,8)"] # view "cubeFractal"
        # a (scale 0 0.01 $ slow 20 sine) --velocity
        # b (scale 0 0.01 $ slow 21 sine) --rot
        # fade (scale 0 0.1 $ slow 19 sine)
        # red (scale 0 1 $ slow 23.133 rand)
        # green (scale 0 1 $ slow 24.471 rand)
        # blue (scale 0 1 $ slow 25.22 rand)


hush

-- friend suggestion

bps (140/120)


do
    let friendChan = "1"
    let dis p = discretise (1/4) $ p
    let timemod p = slow (discretise (1/2) $ shift' 100 $ choose [1.0,1.1..4]) $
                    spaceOut (map (1/) [1,1.25..5]) $
                    degradeBy 0.25 $
                    shift $ p
    let mod p = degradeBy 0.5 $ p
    d1 $ stdmidinudge $ mod $ timemod $ note "0*2" # sound "midi" # midichan friendChan
    d2 $ stdmidinudge $ mod $  stack [
        timemod $ ctlNum "1*2" # control (scale 0 127 $ slow 30 tri),
        timemod $ ctlNum "2*2" # control (scale 0 127 $ slow 31 tri),
        timemod $ ctlNum "3*2" # control (scale 0 80 $ slow 32 tri),
        timemod $ ctlNum "5*2" # control "[0 127]/20"] 
            # sound "midi" # midichan friendChan # midicmd "control"
    d3 $ mod $ timemod $ (|+| n "[0 1]/20") $ n "[0 [0 2]/2]" # s "friend" # lpf "[10000 [10000 10000]/2]"
    vis $ stdvisnudge $ mod $ timemod $ 
        hit "0 [0 1]/2]" # view "[vectorGrid vectorGridB]/20"
        # a (scale 0.1 0.8 $ slow 20 sine)
        # b (scale 0.1 0.8 $ slow 21 sine)
        # c (scale 0.1 0.8 $ slow 19 sine)
        # d (scale 0 1 $ slow 18 sine)
        # fade (scale 0 0.9 $ slow 17 sine)

        hush

-- reb
bps (145/120)

hush

do
    let pat  = "{1       ~ ~ 1 ~ 1 ~ ~}%16"
        cpp  = "{1       ~ ~ ~ ~ ~ ~ ~}%16"
        vpat = "{[0 1]/2 ~ ~ 1 ~ 1 ~ ~}%16"
        chan = "4"
        mod p = id $ p
    -- drums
    d1 $gtfo $ mod $ 
      stack [
        gain (pat) # s "rebsd" # cut 1011 # lpf "10000",
        slow 2 $ (|*| gain "1") $ gain cpp # s "rebcp" # cut 101,
        gtfo $ whenmod 20 15 (gtfo) $ n "{0 0 1}%16" # s "rebch" # cut 200 # gain 0.8,
        gtfo $ whenmod 16 8 (gtfo) $ ((0.0625) <~) $ gain pat # s "rebtom"] # orbit "0"
    d2 $ stdmidinudge $ mod $ (|*| gain "1.15") $ (|+| note "0") $ gain pat # note "[0,2,4]" # s "midi" # midichan chan 
    d3 $ stdmidinudge $ mod $ stack [
            gain pat # ctlNum "10" # control (scale 0 127 $ slow 33 tri),
            gain pat # ctlNum "1" # control (scale 0 127 $ slow 34 tri),
            gain pat # ctlNum "2" # control (scale 0 127 $ slow 35 tri),
            gain pat # ctlNum "3" # control (scale 0 127 $ slow 36 tri)] 
        # s "midi" # midichan chan # midicmd "control"
    vis $ (|+| nudge "-0.1") $ stdvisnudge $ mod $ 
        hit vpat # view "cubePops"
        # a (scale 0 1 $ slow 37 sine)
        # b (scale 0 1 $ slow 36 sine)
        # c (scale 0 0.8 $ slow 19 sine)
        # d (scale 0 1 $ slow 18 sine)
        # fade 1


hush

-- out
bps (220/120)


do
    let chan = "4"
    let vals2 = [0.1,0.125..1]
    let vals = [1,0.975..0.1]
    let mod2 p = density 4 $ spaceOut vals $ p
    let mod p = density 4 $ spaceOut (vals ++ vals2) $ p
    let mod4 p = density 4 $ spaceOut [0.6,0.58..0.1] $ p
    let pat = "1*2"
    let dis p = discretise (1/8) $ p
    let alter f p = sometimesBy 0.25 (f) $ p
    d2 $ stdmidinudge $ mod $ (|*| gain "1.15") $ (|+| note "0") $ gain pat # note "[0,2,4]" # s "midi" # midichan chan
    d3 $ stdmidinudge $ alter (|*| control "0.85") $ stack [
            (# control (scale 0 127 $ slow 33.55 tri)) $ mod $ gain pat # ctlNum 6,
            (# control (scale 0 127 $ slow 34.736 tri)) $ mod $ gain pat # ctlNum 7,
            (# control (scale 0 127 $ slow 33 tri)) $ mod $ gain pat # ctlNum "10",
            (# control (scale 0 127 $ slow 34 tri)) $ mod $ gain pat # ctlNum "1",
            (# control (scale 0 127 $ slow 35 tri)) $ mod $ gain pat # ctlNum "2",
            (# control (scale 0 127 $ slow 36 tri)) $ mod $ gain pat # ctlNum "3" ] 
        # s "midi" # midichan chan # midicmd "control"
    -- samps
    d1 $ gtfo $ alter (|*| speed "2") $
        (# rel (scale 0.1 1 $ slow 32 tri)) $
        (# lpf (scale 80 6000 $ slow 31 tri)) $ 
                mod $ (|*| gain "0.95") $ gain pat # s "[rebbd rebsd rebcy rebrs]/4" # cut "2343" # orbit 0
    vis $ (|+| nudge "-0.05") $ stdvisnudge $ 
        (# red (scale 0 1 $ slow 11 sine)) $
        (# green (scale 0 1 $ slow 13 sine)) $
        (# blue (scale 0 1 $ slow 12 sine) ) $
        alter (|=| hit "1") $ mod $ (|=| hit "0") $ hit pat
            # a (discretise 1  $ scale 0 1 $ shift' 1000 rand)
            # b (discretise 1  $ scale 0 1 $ shift' 1001 rand)
            # c (discretise 1  $ scale 0 1 $ shift' 1002 rand)
            # d (discretise 1  $ scale 0 1 $ shift' 1003 rand)
            # fade (discretise 1  $ scale 0 0.1 $ shift' 1004 rand)
            # view "[logs nodes cubeFractal reg1 reg1B nudges reg2 reg2B cubePops maze vectorGrid vectorGridB]/12"


hush